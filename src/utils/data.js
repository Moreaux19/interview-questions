// Файл с массивом вопросов и ответов

const data = [
  {
    question: 2 + 2,
    answer: 4
  },
  {
    question: 'Какое число больше 1000?',
    answer: 1001
  },
  {
    question: 'Сколько секунд в 24 часах?',
    answer: 86400
  }
];

const data2 = [
  {
    question: 'Какие типы данных существуют в JavaScript?',
    answer:
      'В JavaScript существует семь примитивных типов данных: Number, String, Boolean, Null, Undefined, Symbol и BigInt. Также есть объекты, которые включают в себя функции, массивы и другие структуры данных.'
  },
  {
    question: 'Что такое переменные и как они объявляются в JavaScript?',
    answer:
      'Переменные в JavaScript используются для хранения данных. Их можно объявить с помощью ключевых слов `var`, `let` и `const`. `var` имеет функциональную область видимости, тогда как `let` и `const` имеют блочную область видимости. `const` используется для объявления переменных, значение которых не может быть изменено.'
  },
  {
    question: 'Чем отличается == от === в JavaScript?',
    answer:
      "`==` сравнивает два значения на равенство после приведения типов, тогда как `===` сравнивает значения без приведения типов (строгое сравнение). Например, `1 == '1'` вернет `true`, а `1 === '1'` вернет `false`."
  },
  {
    question: 'Что такое замыкание (closure) в JavaScript?',
    answer:
      'Замыкание — это функция, которая запоминает и имеет доступ к своим внешним (объемлющим) областям видимости даже после того, как внешняя функция завершила выполнение. Это позволяет функции сохранять доступ к переменным своего контекста даже вне этого контекста.'
  },
  {
    question: 'Что такое hoisting в JavaScript?',
    answer:
      'Hoisting — это механизм JavaScript, при котором объявления переменных и функций перемещаются в начало своей области видимости перед выполнением кода. Однако это касается только объявлений, но не инициализаций.'
  },
  {
    question: 'Что такое асинхронное программирование и как оно реализуется в JavaScript?',
    answer:
      'Асинхронное программирование позволяет выполнять задачи в фоновом режиме, не блокируя основной поток выполнения кода. В JavaScript асинхронность достигается с помощью коллбэков, промисов (promises) и ключевых слов `async`/`await`.'
  },
  {
    question: 'Что такое promise и какие состояния у него есть?',
    answer:
      'Promise — это объект, представляющий результат асинхронной операции. У промиса есть три состояния: ожидание (pending), исполнено (fulfilled) и отклонено (rejected). Промисы позволяют упрощать управление асинхронным кодом, поддерживая цепочки вызовов через методы `then` и `catch`.'
  },
  {
    question: 'Что такое async/await в JavaScript?',
    answer:
      '`async` и `await` — это ключевые слова, которые делают работу с промисами более удобной. `async` используется для объявления асинхронной функции, а `await` — для ожидания выполнения промиса внутри асинхронной функции.'
  },
  {
    question: 'Как работает Event Loop в JavaScript?',
    answer:
      'Event Loop — это механизм, который позволяет JavaScript выполнять асинхронные операции. Он работает в едином потоке, обрабатывая события по мере их поступления, не блокируя основной поток выполнения кода. Event Loop обрабатывает очередь коллбэков и выполняет их по очереди.'
  },
  {
    question: 'Что такое DOM?',
    answer:
      'DOM (Document Object Model) — это программный интерфейс для HTML и XML документов, который представляет документ в виде дерева объектов. JavaScript может использовать DOM для динамического изменения структуры, стилей и содержания веб-страниц.'
  },
  {
    question: 'Что такое JSON и как его использовать в JavaScript?',
    answer:
      'JSON (JavaScript Object Notation) — это текстовый формат для обмена данными, который легко читается и парсится. В JavaScript JSON используется для сериализации и десериализации объектов с помощью методов `JSON.stringify` и `JSON.parse`.'
  },
  {
    question: 'Что такое callback функция?',
    answer:
      'Callback функция — это функция, которая передается в другую функцию в качестве аргумента и вызывается после завершения некоторой операции. Коллбэки широко используются в асинхронном программировании для обработки результатов асинхронных операций.'
  },
  {
    question: 'Что такое this в JavaScript?',
    answer:
      'Ключевое слово `this` в JavaScript ссылается на контекст выполнения функции. В зависимости от того, как функция вызвана, `this` может ссылаться на глобальный объект, объект-владельца, или другой контекст. Контекст `this` можно явно задавать с помощью методов `call`, `apply` и `bind`.'
  },
  {
    question: 'Что такое прототипное наследование в JavaScript?',
    answer:
      'Прототипное наследование — это механизм, который позволяет объектам наследовать свойства и методы от других объектов. Каждый объект в JavaScript имеет внутреннее свойство `__proto__`, которое указывает на его прототип. Прототипы позволяют создавать цепочки наследования.'
  },
  {
    question: 'Что такое IIFE (Immediately Invoked Function Expression)?',
    answer:
      'IIFE (немедленно вызываемое функциональное выражение) — это функция, которая определяется и вызывается одновременно. Оно используется для создания локальной области видимости и предотвращения загрязнения глобальной области видимости.'
  },
  {
    question: 'Что такое strict mode в JavaScript?',
    answer:
      "Strict mode (строгий режим) — это режим, который вводит более строгие правила написания кода в JavaScript. Он помогает обнаруживать потенциальные ошибки, улучшать производительность и безопасность. Включается с помощью строки `'use strict';` в начале скрипта или функции."
  },
  {
    question: 'Как работают стрелочные функции (arrow functions) в JavaScript?',
    answer:
      'Стрелочные функции — это сокращенная форма записи функций, введенная в ES6. Они не имеют своего `this`, `arguments`, `super` или `new.target`, что делает их удобными для использования в качестве коллбэков и вложенных функций. Пример: `const add = (a, b) => a + b;`.'
  },
  {
    question: 'Что такое модуль в JavaScript и как его использовать?',
    answer:
      "Модуль в JavaScript — это файл, который экспортирует функции, объекты или переменные и импортирует их в другие файлы. ES6 представил стандартные модули с использованием ключевых слов `import` и `export`. Пример: `export const myFunction = () => {}; import { myFunction } from './myModule';`."
  },
  {
    question: 'Как работает метод map() для массивов?',
    answer:
      'Метод `map()` создает новый массив, применяя функцию к каждому элементу исходного массива. Пример: `const numbers = [1, 2, 3]; const doubled = numbers.map(num => num * 2);` — результат будет `[2, 4, 6]`.'
  },
  {
    question: 'Как работает метод filter() для массивов?',
    answer:
      'Метод `filter()` создает новый массив, включающий только те элементы исходного массива, для которых переданная функция возвращает `true`. Пример: `const numbers = [1, 2, 3, 4]; const evens = numbers.filter(num => num % 2 === 0);` — результат будет `[2, 4]`.'
  },
  {
    question: 'Как работает метод reduce() для массивов?',
    answer:
      'Метод `reduce()` применяет функцию к аккумулятору и каждому элементу массива (слева направо), сводя его к одному значению. Пример: `const sum = [1, 2, 3].reduce((acc, num) => acc + num, 0);` — результат будет `6`.'
  },
  {
    question: 'Что такое Event Delegation?',
    answer:
      'Event Delegation — это техника управления событиями, при которой событие обрабатывается на родительском элементе вместо вложенных элементов. Это полезно для оптимизации производительности и уменьшения количества обработчиков событий. Пример: назначить один обработчик кликов на `<ul>`, который будет обрабатывать клики на его `<li>` элементах.'
  },
  {
    question: 'Как работают промисы (Promises) в JavaScript?',
    answer:
      'Промисы в JavaScript — это объекты, представляющие завершение или неудачу асинхронной операции. Промис может находиться в одном из трех состояний: ожидание (pending), выполнено (fulfilled) или отклонено (rejected). Они позволяют писать асинхронный код более структурированно, избегая вложенности коллбэков. Для обработки результата промиса используются методы then для успешного выполнения и catch для ошибок.'
  },
  {
    question: 'Что такое React?',
    answer:
      'React — это библиотека JavaScript для создания пользовательских интерфейсов. Она была разработана Facebook и позволяет создавать компоненты, которые можно использовать повторно в приложении. React использует виртуальный DOM для оптимизации обновлений интерфейса, что делает его очень эффективным.'
  },
  {
    question: 'Что такое компонент в React?',
    answer:
      'Компонент в React — это независимый и повторно используемый кусок кода, который возвращает элемент React для отображения. Компоненты могут быть функциональными или классовыми и могут иметь собственное состояние и свойства (props).'
  },
  {
    question: 'Какая разница между классовыми и функциональными компонентами?',
    answer:
      'Классовые компоненты объявляются как классы, наследующие от `React.Component`, и могут иметь состояние и методы жизненного цикла. Функциональные компоненты — это функции, которые принимают `props` и возвращают элемент React. С введением хуков в React 16.8 функциональные компоненты также могут использовать состояние и другие функции React.'
  },
  {
    question: 'Что такое JSX?',
    answer:
      'JSX (JavaScript XML) — это синтаксическое расширение для JavaScript, которое позволяет писать HTML-подобный код внутри JavaScript. Он преобразуется в вызовы `React.createElement`, что позволяет использовать силу JavaScript для создания сложных пользовательских интерфейсов.'
  },
  {
    question: 'Что такое props в React?',
    answer:
      'Props (сокращение от properties) — это объект, который используется для передачи данных от родительского компонента к дочернему. Props делают компоненты более динамичными и позволяют создавать повторно используемые компоненты с различным поведением.'
  },
  {
    question: 'Что такое state в React?',
    answer:
      'State — это объект, который управляет состоянием компонента. В отличие от props, state управляется и изменяется внутри самого компонента. Изменения в state вызывают повторный рендеринг компонента, что позволяет обновлять пользовательский интерфейс.'
  },
  {
    question: 'Объясните, что такое Virtual DOM и как он работает.',
    answer:
      'Virtual DOM — это легковесная копия реального DOM, которую React использует для оптимизации обновлений интерфейса. При изменении состояния компонента, React сначала обновляет виртуальный DOM, а затем вычисляет минимальное количество изменений, необходимых для обновления реального DOM, что повышает производительность приложения.'
  },
  {
    question: 'Что такое хук (hook) в React?',
    answer:
      'Хуки — это функции, которые позволяют использовать состояние и другие возможности React в функциональных компонентах. Самые популярные хуки — это `useState` для управления состоянием и `useEffect` для управления побочными эффектами.'
  },
  {
    question: 'Что делает хук useState?',
    answer:
      'Хук `useState` используется для добавления состояния в функциональные компоненты. Он возвращает массив с текущим состоянием и функцией для его обновления. Например: `const [count, setCount] = useState(0);`.'
  },
  {
    question: 'Что делает хук useEffect?',
    answer:
      'Хук `useEffect` используется для выполнения побочных эффектов в функциональных компонентах, таких как запросы данных, подписки или изменения DOM. Он принимает функцию, которая выполняется после каждого рендера. Можно также указать массив зависимостей, чтобы контролировать, когда эффект должен выполняться.'
  },
  {
    question: 'Что такое Redux?',
    answer:
      'Redux — это библиотека управления состоянием для JavaScript приложений, часто используемая с React. Она помогает управлять состоянием приложения централизованно, что облегчает отладку и тестирование. Основные принципы Redux — это единый источник правды (хранилище), неизменяемость состояния и чистые функции (редьюсеры) для управления состоянием.'
  },
  {
    question: 'Что такое контекст (Context) в React?',
    answer:
      'Контекст в React используется для передачи данных через дерево компонентов без необходимости передавать props на каждом уровне. Это полезно для глобальных данных, таких как тема, аутентификация или настройки приложения. Контекст создается с помощью `React.createContext` и используется с `Context.Provider` и `Context.Consumer` или хуком `useContext`.'
  },
  {
    question: 'Как передавать данные между компонентами в React?',
    answer:
      'Данные в React можно передавать через props от родительского компонента к дочернему. Также можно использовать контекст для глобальных данных. Для более сложных сценариев управления состоянием можно использовать такие библиотеки, как Redux или MobX.'
  },
  {
    question: 'Что такое жизненный цикл компонента в React?',
    answer:
      'Жизненный цикл компонента — это набор методов, которые React вызывает на разных этапах существования компонента. Основные методы включают `componentDidMount`, `componentDidUpdate` и `componentWillUnmount` для классовых компонентов. В функциональных компонентах хуки `useEffect` выполняют аналогичные функции.'
  },
  {
    question: 'Как создать компонент в React?',
    answer:
      'Компонент в React можно создать двумя способами: как функциональный компонент или как классовый компонент. Пример функционального компонента: `function MyComponent() { return <div>Hello, World!</div>; }`. Пример классового компонента: `class MyComponent extends React.Component { render() { return <div>Hello, World!</div>; } }`.'
  },
  {
    question: 'Как обновлять состояние компонента?',
    answer:
      'Состояние компонента обновляется с помощью метода `setState` в классовых компонентах и функции, возвращаемой хуком `useState`, в функциональных компонентах. Пример: `this.setState({ count: this.state.count + 1 })` или `setCount(count + 1)`.'
  },
  {
    question: 'Что такое ключи (keys) в React и зачем они нужны?',
    answer:
      'Ключи — это атрибуты, которые React использует для отслеживания элементов списка при их изменении. Они помогают оптимизировать процесс рендеринга и должны быть уникальными среди соседних элементов. Пример: `items.map(item => <li key={item.id}>{item.name}</li>)`.'
  },
  {
    question: 'Как обрабатывать события в React?',
    answer:
      'Обработка событий в React аналогична обработке событий в обычном HTML, но с использованием синтаксиса JSX. Например, чтобы добавить обработчик клика, нужно использовать `onClick` атрибут: `<button onClick={this.handleClick}>Click me</button>`. Для функциональных компонентов используйте стрелочные функции или методы.'
  },
  {
    question: 'Что такое PropTypes?',
    answer:
      'PropTypes — это библиотека для проверки типов props, передаваемых в компонент. Она помогает документировать компоненты и обнаруживать ошибки в раннем этапе разработки. Пример использования: `MyComponent.propTypes = { name: PropTypes.string, age: PropTypes.number };`.'
  },
  {
    question: 'Что такое HOC (Higher-Order Component)?',
    answer:
      'Higher-Order Component (HOC) — это функция, которая принимает компонент и возвращает новый компонент с дополнительной функциональностью. HOC часто используется для повторного использования логики или поведения между компонентами. Пример: `const EnhancedComponent = withExtraProps(OriginalComponent);`.'
  },
  {
    question: 'Как сделать асинхронный запрос в React?',
    answer:
      "Асинхронные запросы в React обычно выполняются в методе `componentDidMount` или с использованием хука `useEffect` для функциональных компонентов. Для выполнения запроса можно использовать `fetch` или библиотеки, такие как Axios. Пример: `useEffect(() => { fetch('api/data').then(response => response.json()).then(data => setData(data)); }, []);`."
  },
  {
    question: 'Что такое React Router?',
    answer:
      'React Router — это библиотека для управления маршрутизацией в приложениях React. Она позволяет определять маршруты и компоненты, которые должны отображаться для каждого маршрута. Основные компоненты React Router — это `BrowserRouter`, `Route`, `Link` и `Switch`.'
  },
  {
    question: 'Как работает компонент Route в React Router?',
    answer:
      "Компонент `Route` используется для определения маршрута и компонента, который должен быть отображен для этого маршрута. Пример: `<Route path='/about' component={About} />`. Также можно использовать рендер-функцию для передачи props: `<Route path='/about' render={(props) => <About {...props} />} />`."
  }
];

export default data;
